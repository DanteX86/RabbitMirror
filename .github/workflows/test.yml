name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Create required directories
      run: |
        mkdir -p data exports logs reports

    - name: Run tests with pytest
      run: |
        pytest --cov=rabbitmirror --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Create test data
      run: |
        mkdir -p test_data
        echo '<html><body><div class="content-cell">Test Video</div></body></html>' > test_data/sample.html

    - name: Test CLI commands
      run: |
        # Test help commands
        rabbitmirror --help
        rabbitmirror config --help
        rabbitmirror process --help
        rabbitmirror analyze --help
        
        # Test config commands
        rabbitmirror config set test_key "test_value"
        rabbitmirror config get test_key
        rabbitmirror config list

    - name: Test package imports
      run: |
        python -c "import rabbitmirror; print(f'RabbitMirror v{rabbitmirror.__version__} imported successfully')"
        python -c "from rabbitmirror import HistoryParser, ClusterEngine, ConfigManager"
