name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        type: boolean
        required: false
        default: false

jobs:
  test:
    name: Test Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        pytest tests/ -v --cov=rabbitmirror --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run security scan
      run: |
        bandit -r rabbitmirror/ -f json -o bandit-report.json
        safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt

    - name: Check code formatting
      run: |
        black --check rabbitmirror/
        isort --check-only rabbitmirror/

    - name: Run linting
      run: |
        flake8 rabbitmirror/

    - name: Run type checking
      run: |
        mypy rabbitmirror/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security, quality]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: ${{ github.event.inputs.test_pypi == 'true' && 'test-pypi' || 'pypi' }}

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      if: github.event.inputs.test_pypi == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Publish to PyPI
      if: github.event.inputs.test_pypi != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.tar.gz
          dist/*.whl
        body: |
          ## What's Changed

          See [CHANGELOG.md](https://github.com/romulusaugustus/RabbitMirror/blob/main/CHANGELOG.md) for detailed changes.

          ## Installation

          ```bash
          pip install rabbitmirror==${{ github.event.release.tag_name }}
          ```

          ## Quick Start

          ```bash
          # Parse your YouTube watch history
          rabbitmirror process parse watch-history.html --output data.json

          # Analyze patterns
          rabbitmirror analyze detect-patterns data.json --output patterns.json

          # Generate dashboard
          rabbitmirror report export-dashboard data.json --output dashboard/
          ```

          ## Links

          - [Documentation](https://romulusaugustus.github.io/RabbitMirror/)
          - [PyPI Package](https://pypi.org/project/rabbitmirror/)
          - [Report Issues](https://github.com/romulusaugustus/RabbitMirror/issues)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
