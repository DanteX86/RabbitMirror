name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 pylint bandit mypy

    - name: Check code formatting with Black
      run: |
        black --check --diff rabbitmirror/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff rabbitmirror/ tests/

    - name: Lint with flake8
      run: |
        flake8 rabbitmirror/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 rabbitmirror/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Lint with pylint
      run: |
        pylint rabbitmirror/ --exit-zero --score=yes

    - name: Security scan with bandit
      run: |
        bandit -r rabbitmirror/ -f json -o bandit-report.json || true
        bandit -r rabbitmirror/ -f txt

    - name: Type checking with mypy
      run: |
        mypy rabbitmirror/ --ignore-missing-imports --no-strict-optional || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  docs-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation builds
      run: |
        # Create basic docs structure if it doesn't exist
        mkdir -p docs
        if [ ! -f docs/conf.py ]; then
          echo "Skipping docs build - no docs/conf.py found"
        else
          sphinx-build -b html docs docs/_build
        fi

  package-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Check manifest
      run: |
        check-manifest || true

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/
